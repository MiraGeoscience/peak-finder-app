[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"


[project]
name = "peak-finder-app"
version = "0.3.0-alpha.1"

dynamic = ["dependencies"]

requires-python = ">=3.10,<3.13"

license = "MIT"
description = "Peak Finder App"
authors = [
    { name = "Mira Geoscience", email = "support@mirageoscience.com" }
]
maintainers = [{ name = "Dominique Fournier", email = "dominiquef@mirageoscience.com" }]


readme = "package.rst"
packages = [
     { include = "peak_finder" },
     { include = "peak_finder-assets" },
]

include = [
    { path = "COPYING" },
    { path = "COPYING.LESSER" },
    { path = "LICENSE" },
    { path = "README.rst" },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst" },
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Natural Language :: English",
]

[project.urls]
repository = "https://github.com/MiraGeoscience/peak-finder-app"
documentation = "https://mirageoscience-peak-finder-app.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"


[tool.poetry.dependencies]
python = ">=3.10, <3.13"

dash = {version="^2.12", optional = true}
dash-daq = {version="0.5.*", optional = true}

# note: py-deps-clock defines custom mapping from dask to dask-core
dask = ">=2025.3, <2025.4.dev"  # also in simpeg[dask]
distributed = ">=2025.3, <2025.4.dev"  # for dask[distributed]
flask = {version="^3.0.3", optional = true}
numpy = "~1.26.0"  # also in geoapps-utils, geoh5py
plotly = "~5.19.0"
scipy = "~1.14.0"
tqdm = "^4.66.1"

# Note about packages for pyside2 and pyqtwebengine:
#   - latest version for pip packages is 5.12.2, while Conda has more recent 5.* versions
#   - pip packages only exists for python < 3.11, while Conda has them for Python 3.11 and 3.12
#   - limit below to Python < 3.11 is ignored by conda-lock,
#   => conda-lock resolves to the latest version available in conda-forge for any Python versions
#      and this dependency definition is still compatible for a pip install
pyqtwebengine = {version = ">=5.15.2, <5.16.dev", optional = true, python = "<3.11"}
pyside2 = {version = ">=5.15.2, <5.16.dev", optional = true, python = "<3.11"}

## Conda package is missing the Dash dependencies: list them explicitly
#----------------------------------------------------------------------
dash-core-components = {version = ">=2, <3.dev", optional = true}
dash-html-components = {version = ">=2, <3.dev", optional = true}
dash-table = {version = ">=5, <6.dev", optional = true}

## Pip dependencies from Git repositories
#----------------------------------------
#geoh5py = {version = ">=0.12.0a, <0.13.dev", source = "pypi", allow-prereleases = true}  # also in geoapps-utils
geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "develop"}

#geoapps-utils = {version = ">=0.6.0a, <0.7.dev", source = "pypi", allow-prereleases = true}
geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", rev = "develop"}

#curve-apps = {version = ">=0.3.0a, <0.4.dev", source = "pypi", allow-prereleases = true}
curve-apps = {git = "https://github.com/MiraGeoscience/curve-apps.git", rev = "develop"}

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from URL: !!! no actual lock, as tag or branch can move and installation will fetch current !!!
#   - for a tag:    my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/TAG.tar.gz" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.tar.gz" }
# - to actually lock on a revision: my_package = { git = "https://github.com/ORGANISATION/REPO.git", rev = "GIT_REV" }
#   (where rev value is a tag, a branch name or a commit hash). Can also use ``branch`` or ``tag`` instead of ``rev``

[tool.poetry.group.dev.dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
pyyaml = '*'
jinja2 = '*'
packaging = '*'
readthedocs-sphinx-ext = "*"
sphinx = "^5.0"
tomli = "*" # for tests only

[project.optional-dependencies]
dash = [
    "dash",
    "dash-daq",
    "flask",
    "pyqt5-qt5",
    "pyqtwebengine",
    "pyqtwebengine-qt5",
    "pyside2",
    # Dash dependencies (needed here as they got explicitly listed for Conda)
    "dash-core-components",
    "dash-html-components",
    "dash-table",
]

[tool.conda-lock]
platforms = ['win-64', 'linux-64']
channels = ['conda-forge']

[tool.conda-lock.dependencies]
libblas = "*=*mkl"  # because simpeg already brings in the MKL

## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
h5py = ">=3.2.1, <4.0.dev"  # from geoh5py
Pillow = ">=10.3.0, <10.4.dev"  # from geoh5py
pydantic = ">=2.5.2, <3.0.dev"  # from geoh5py, curve-apps, geoapps-utils
scikit-image = ">=0.24.0, <0.25.dev"  # from curve-apps, also used by geo-unsup-mapper

[tool.isort]
profile = "black"

[tool.black]
# defaults are just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
#    "numpy.typing.mypy_plugin"
]

[tool.pytest.ini_options]
#addopts =

[tool.coverage.run]
branch = true
source = ["peak_finder"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 75

[tool.coverage.html]
skip_empty = true
skip_covered = true

